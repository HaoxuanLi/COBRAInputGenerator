--
--	Package File Template
--
--	Purpose: This package defines supplemental types, subtypes, 
--		 constants, and functions 
--
--   To use any of the example code shown below, uncomment the lines and modify as necessary
--

library IEEE;
use IEEE.STD_LOGIC_1164.all;

package FPGA_Inputs_Pkg is

-- Declare constants
	constant Input_Length 		: integer := 100;				-- Input length
	constant Serial_Communication_MAX 	: integer := 2000000; 			-- Time needed for serial communication
	constant Clk_Divider			: integer := 5; 					-- Clock divider 20000000
	constant Delay					: integer := 60000000; 			-- Delay cycles added to the beginning of the signal
	constant TicToc_Range_Bit	: integer := 32;					-- The number of bits needed for the Max value of TicToc must be able to be divided by 4
	constant Number_of_Task		: integer := 4;
	constant Max_Task_Number_Bit: integer:= 4;      -- The max number of tasks is: std_logic_vector (Number_of_Tasks_BiDigits -1 downto 0) make sure it can be divided by 4
--	constant TestRound_Max 		: integer := 1;		-- The number of test rounds


-- Declare new type 	
	type Input_Array 	is array (0 to (Input_Length-1)) of std_logic;
	--type TicToc_Array is array (0 to (Input_Length-1)) of STD_LOGIC_VECTOR (TicToc_Range_Bit -1  downto 0);
	
-- Declare input signals



-- type <new_type> is
--  record
--    <type_name>        : std_logic_vector( 7 downto 0);
--    <type_name>        : std_logic;
-- end record;
--
-- Declare constants
--
-- constant <constant_name>		: time := <time_unit> ns;
-- constant <constant_name>		: integer := <value;
--
-- Declare functions and procedure
--
-- function <function_name>  (signal <signal_name> : in <type_declaration>) return <type_declaration>;
-- procedure <procedure_name> (<type_declaration> <constant_name>	: in <type_declaration>);
--

end FPGA_Inputs_Pkg;

package body FPGA_Inputs_Pkg is

---- Example 1
--  function <function_name>  (signal <signal_name> : in <type_declaration>  ) return <type_declaration> is
--    variable <variable_name>     : <type_declaration>;
--  begin
--    <variable_name> := <signal_name> xor <signal_name>;
--    return <variable_name>; 
--  end <function_name>;

---- Example 2
--  function <function_name>  (signal <signal_name> : in <type_declaration>;
--                         signal <signal_name>   : in <type_declaration>  ) return <type_declaration> is
--  begin
--    if (<signal_name> = '1') then
--      return <signal_name>;
--    else
--      return 'Z';
--    end if;
--  end <function_name>;

---- Procedure Example
--  procedure <procedure_name>  (<type_declaration> <constant_name>  : in <type_declaration>) is
--    
--  begin
--    
--  end <procedure_name>;
 
end FPGA_Inputs_Pkg;
