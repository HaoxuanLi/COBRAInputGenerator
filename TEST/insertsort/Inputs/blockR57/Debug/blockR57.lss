
blockR57.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800150  00800150  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c5f  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af6  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000202  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	ad c0       	rjmp	.+346    	; 0x164 <__vector_2>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 ed       	ldi	r30, 0xD4	; 212
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a0 35       	cpi	r26, 0x50	; 80
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a0 e5       	ldi	r26, 0x50	; 80
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a0 38       	cpi	r26, 0x80	; 128
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	35 d0       	rcall	.+106    	; 0x136 <main>
  cc:	81 c0       	rjmp	.+258    	; 0x1d0 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <blockInputUpdate>:
unsigned int insertsort_a_block[11];
 

void blockInputUpdate(int blockInputUpdate_i) 
{
	array_block[i_block] = array_i__inputs[blockInputUpdate_i];
  d0:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <i_block>
  d4:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <i_block+0x1>
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	ec 5a       	subi	r30, 0xAC	; 172
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	dc 01       	movw	r26, r24
  e6:	a8 5d       	subi	r26, 0xD8	; 216
  e8:	be 4f       	sbci	r27, 0xFE	; 254
  ea:	2d 91       	ld	r18, X+
  ec:	3c 91       	ld	r19, X
  ee:	31 83       	std	Z+1, r19	; 0x01
  f0:	20 83       	st	Z, r18
i_block = i_inputs[blockInputUpdate_i];
  f2:	fc 01       	movw	r30, r24
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	80 81       	ld	r24, Z
  fa:	91 81       	ldd	r25, Z+1	; 0x01
  fc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <i_block+0x1>
 100:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <i_block>
 104:	08 95       	ret

00000106 <benchmarkBlock>:
} 
 

void benchmarkBlock(void) 
 {
PORTC = (1 << PC4); 
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	88 b9       	out	0x08, r24	; 8
insertsort_a_block[i_block] = array_block[i_block]; 
 10a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <i_block>
 10e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <i_block+0x1>
 112:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <i_block>
 116:	b0 91 53 01 	lds	r27, 0x0153	; 0x800153 <i_block+0x1>
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	e6 59       	subi	r30, 0x96	; 150
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	aa 0f       	add	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	ac 5a       	subi	r26, 0xAC	; 172
 128:	be 4f       	sbci	r27, 0xFE	; 254
 12a:	8d 91       	ld	r24, X+
 12c:	9c 91       	ld	r25, X
 12e:	91 83       	std	Z+1, r25	; 0x01
 130:	80 83       	st	Z, r24
PORTC = (0 << PC4); 
 132:	18 b8       	out	0x08, r1	; 8
 134:	08 95       	ret

00000136 <main>:

/*main function*/
int main(void){

	/*GPIO Pins*/
	DDRA = 0x00;
 136:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xF0;
 138:	80 ef       	ldi	r24, 0xF0	; 240
 13a:	87 b9       	out	0x07, r24	; 7
	/*External interrupt settings*/
	PORTD = (1 << PD1);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	8b b9       	out	0x0b, r24	; 11
	EICRA =	(1 << ISC11) | (0 << ISC10);
 140:	98 e0       	ldi	r25, 0x08	; 8
 142:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT1);
 146:	8d bb       	out	0x1d, r24	; 29
	/*Initialize function*/
	 
	/*Enable FPGA Interupt trigger*/
	PORTC = (1 << PC5);
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	88 b9       	out	0x08, r24	; 8
	PORTC = (0 << PC5);
 14c:	18 b8       	out	0x08, r1	; 8
	/*Initialize input update counter*/
	/*Enable interrupt*/
	sei();
 14e:	78 94       	sei
	/*while loop*/
	while(i<20){}
 150:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 154:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
 158:	84 31       	cpi	r24, 0x14	; 20
 15a:	91 05       	cpc	r25, r1
 15c:	ec f3       	brlt	.-6      	; 0x158 <main+0x22>
	/*Return*/
	return(1);
}
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret

00000164 <__vector_2>:

/*Interrupt handler*/
ISR(INT1_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
 16e:	0b b6       	in	r0, 0x3b	; 59
 170:	0f 92       	push	r0
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31

	/*Read input values*/
	blockInputUpdate(i);
 18a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 18e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
 192:	9e df       	rcall	.-196    	; 0xd0 <blockInputUpdate>
	/*Pull up output pin*/
	/*Measure the execution time of the code block*/
	benchmarkBlock();
 194:	b8 df       	rcall	.-144    	; 0x106 <benchmarkBlock>
	/*Pull down output pin*/PORTC = (0 << PC4); 
 196:	18 b8       	out	0x08, r1	; 8

	i++;
 198:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
 19c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
 1a6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0b be       	out	0x3b, r0	; 59
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
