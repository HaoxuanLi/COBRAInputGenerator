
blockR125.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000518  00800100  00000c74  00000d08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c74  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ec  00800618  00800618  00001220  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001137  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d70  00000000  00000000  00002493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040e  00000000  00000000  00003203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00003614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080b  00000000  00000000  000037dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e5  00000000  00000000  00003fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
   2:	00 00       	nop
   4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
   6:	00 00       	nop
   8:	f1 c2       	rjmp	.+1506   	; 0x5ec <__vector_2>
   a:	00 00       	nop
   c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
   e:	00 00       	nop
  10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
  12:	00 00       	nop
  14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
  16:	00 00       	nop
  18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
  1a:	00 00       	nop
  1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
  1e:	00 00       	nop
  20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
  22:	00 00       	nop
  24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
  26:	00 00       	nop
  28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
  2a:	00 00       	nop
  2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
  2e:	00 00       	nop
  30:	4e c0       	rjmp	.+156    	; 0xce <__bad_interrupt>
  32:	00 00       	nop
  34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
  36:	00 00       	nop
  38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
  3a:	00 00       	nop
  3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
  3e:	00 00       	nop
  40:	46 c0       	rjmp	.+140    	; 0xce <__bad_interrupt>
  42:	00 00       	nop
  44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
  46:	00 00       	nop
  48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
  4a:	00 00       	nop
  4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
  4e:	00 00       	nop
  50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
  52:	00 00       	nop
  54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
  56:	00 00       	nop
  58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
  5a:	00 00       	nop
  5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
  5e:	00 00       	nop
  60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
  62:	00 00       	nop
  64:	34 c0       	rjmp	.+104    	; 0xce <__bad_interrupt>
  66:	00 00       	nop
  68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
  6a:	00 00       	nop
  6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
  6e:	00 00       	nop
  70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
  72:	00 00       	nop
  74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
  76:	00 00       	nop
  78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
  7a:	00 00       	nop
  7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
  7e:	00 00       	nop
  80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
  82:	00 00       	nop
  84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
  86:	00 00       	nop
  88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
  8a:	00 00       	nop
  8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
  8e:	00 00       	nop
  90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	16 e0       	ldi	r17, 0x06	; 6
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e4 e7       	ldi	r30, 0x74	; 116
  a8:	fc e0       	ldi	r31, 0x0C	; 12
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a8 31       	cpi	r26, 0x18	; 24
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	27 e0       	ldi	r18, 0x07	; 7
  bc:	a8 e1       	ldi	r26, 0x18	; 24
  be:	b6 e0       	ldi	r27, 0x06	; 6
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a4 30       	cpi	r26, 0x04	; 4
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	28 d2       	rcall	.+1104   	; 0x51c <main>
  cc:	d1 c5       	rjmp	.+2978   	; 0xc70 <_exit>

000000ce <__bad_interrupt>:
  ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <binarysearch_randomInteger>:
/*
  binarysearch_RandomInteger generates "random" integers between 0 and 8094.
*/
long binarysearch_randomInteger( void )
{
  binarysearch_seed = ( ( binarysearch_seed * 133 ) + 81 ) % 8095;
  d0:	20 91 56 06 	lds	r18, 0x0656	; 0x800656 <binarysearch_seed>
  d4:	30 91 57 06 	lds	r19, 0x0657	; 0x800657 <binarysearch_seed+0x1>
  d8:	45 e8       	ldi	r20, 0x85	; 133
  da:	42 9f       	mul	r20, r18
  dc:	c0 01       	movw	r24, r0
  de:	43 9f       	mul	r20, r19
  e0:	90 0d       	add	r25, r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 5a       	subi	r24, 0xAF	; 175
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	6f e9       	ldi	r22, 0x9F	; 159
  ea:	7f e1       	ldi	r23, 0x1F	; 31
  ec:	f1 d2       	rcall	.+1506   	; 0x6d0 <__divmodhi4>
  ee:	90 93 57 06 	sts	0x0657, r25	; 0x800657 <binarysearch_seed+0x1>
  f2:	80 93 56 06 	sts	0x0656, r24	; 0x800656 <binarysearch_seed>
  return( binarysearch_seed );
  f6:	60 91 56 06 	lds	r22, 0x0656	; 0x800656 <binarysearch_seed>
  fa:	70 91 57 06 	lds	r23, 0x0657	; 0x800657 <binarysearch_seed+0x1>
  fe:	07 2e       	mov	r0, r23
 100:	00 0c       	add	r0, r0
 102:	88 0b       	sbc	r24, r24
 104:	99 0b       	sbc	r25, r25
}
 106:	08 95       	ret

00000108 <binarysearch_init>:


void binarysearch_init( void )
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
  binarysearch_initSeed initializes the seed used in the "random" number
  generator.
*/
void binarysearch_initSeed( void )
{
  binarysearch_seed = 0;
 110:	10 92 57 06 	sts	0x0657, r1	; 0x800657 <binarysearch_seed+0x1>
 114:	10 92 56 06 	sts	0x0656, r1	; 0x800656 <binarysearch_seed>
 118:	ca e1       	ldi	r28, 0x1A	; 26
 11a:	d6 e0       	ldi	r29, 0x06	; 6
 11c:	06 e5       	ldi	r16, 0x56	; 86
 11e:	16 e0       	ldi	r17, 0x06	; 6

  binarysearch_initSeed();

  _Pragma( "loopbound min 15 max 15" )
  for ( i = 0; i < 15; ++i ) {
    binarysearch_data[ i ].key = binarysearch_randomInteger();
 120:	d7 df       	rcall	.-82     	; 0xd0 <binarysearch_randomInteger>
 122:	79 83       	std	Y+1, r23	; 0x01
 124:	68 83       	st	Y, r22
    binarysearch_data[ i ].value = binarysearch_randomInteger();
 126:	d4 df       	rcall	.-88     	; 0xd0 <binarysearch_randomInteger>
 128:	7b 83       	std	Y+3, r23	; 0x03
 12a:	6a 83       	std	Y+2, r22	; 0x02
 12c:	24 96       	adiw	r28, 0x04	; 4
  int i;

  binarysearch_initSeed();

  _Pragma( "loopbound min 15 max 15" )
  for ( i = 0; i < 15; ++i ) {
 12e:	c0 17       	cp	r28, r16
 130:	d1 07       	cpc	r29, r17
 132:	b1 f7       	brne	.-20     	; 0x120 <binarysearch_init+0x18>
    binarysearch_data[ i ].key = binarysearch_randomInteger();
    binarysearch_data[ i ].value = binarysearch_randomInteger();
  }
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <binarysearch_return>:


int binarysearch_return( void )
{
  return( binarysearch_result );
}
 13e:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <binarysearch_result>
 142:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <binarysearch_result+0x1>
 146:	08 95       	ret

00000148 <binarysearch_binary_search>:

int binarysearch_binary_search( int x )
{
  int fvalue, mid, up, low;

  low = 0;
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
  up = 14;
 14c:	4e e0       	ldi	r20, 0x0E	; 14
 14e:	50 e0       	ldi	r21, 0x00	; 0
  fvalue = -1;
 150:	af ef       	ldi	r26, 0xFF	; 255
 152:	bf ef       	ldi	r27, 0xFF	; 255

  _Pragma( "loopbound min 1 max 4" )
  while ( low <= up ) {
    mid = ( low + up ) >> 1;
 154:	9b 01       	movw	r18, r22
 156:	24 0f       	add	r18, r20
 158:	35 1f       	adc	r19, r21
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18

    if ( binarysearch_data[ mid ].key == x ) {
 15e:	f9 01       	movw	r30, r18
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	e6 5e       	subi	r30, 0xE6	; 230
 16a:	f9 4f       	sbci	r31, 0xF9	; 249
 16c:	01 90       	ld	r0, Z+
 16e:	f0 81       	ld	r31, Z
 170:	e0 2d       	mov	r30, r0
 172:	e8 17       	cp	r30, r24
 174:	f9 07       	cpc	r31, r25
 176:	09 f0       	breq	.+2      	; 0x17a <binarysearch_binary_search+0x32>
 178:	70 c0       	rjmp	.+224    	; 0x25a <Toc_flag+0x2>
      /* Item found */
	asm(
 17a:	00 92 9c 06 	sts	0x069C, r0	; 0x80069c <register_address_org>
 17e:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <register_address_org+0x1>
 182:	20 92 9e 06 	sts	0x069E, r2	; 0x80069e <register_address_org+0x2>
 186:	30 92 9f 06 	sts	0x069F, r3	; 0x80069f <register_address_org+0x3>
 18a:	40 92 a0 06 	sts	0x06A0, r4	; 0x8006a0 <register_address_org+0x4>
 18e:	50 92 a1 06 	sts	0x06A1, r5	; 0x8006a1 <register_address_org+0x5>
 192:	60 92 a2 06 	sts	0x06A2, r6	; 0x8006a2 <register_address_org+0x6>
 196:	70 92 a3 06 	sts	0x06A3, r7	; 0x8006a3 <register_address_org+0x7>
 19a:	80 92 a4 06 	sts	0x06A4, r8	; 0x8006a4 <register_address_org+0x8>
 19e:	90 92 a5 06 	sts	0x06A5, r9	; 0x8006a5 <register_address_org+0x9>
 1a2:	a0 92 a6 06 	sts	0x06A6, r10	; 0x8006a6 <register_address_org+0xa>
 1a6:	b0 92 a7 06 	sts	0x06A7, r11	; 0x8006a7 <register_address_org+0xb>
 1aa:	c0 92 a8 06 	sts	0x06A8, r12	; 0x8006a8 <register_address_org+0xc>
 1ae:	d0 92 a9 06 	sts	0x06A9, r13	; 0x8006a9 <register_address_org+0xd>
 1b2:	e0 92 aa 06 	sts	0x06AA, r14	; 0x8006aa <register_address_org+0xe>
 1b6:	f0 92 ab 06 	sts	0x06AB, r15	; 0x8006ab <register_address_org+0xf>
 1ba:	00 93 ac 06 	sts	0x06AC, r16	; 0x8006ac <register_address_org+0x10>
 1be:	10 93 ad 06 	sts	0x06AD, r17	; 0x8006ad <register_address_org+0x11>
 1c2:	20 93 ae 06 	sts	0x06AE, r18	; 0x8006ae <register_address_org+0x12>
 1c6:	30 93 af 06 	sts	0x06AF, r19	; 0x8006af <register_address_org+0x13>
 1ca:	40 93 b0 06 	sts	0x06B0, r20	; 0x8006b0 <register_address_org+0x14>
 1ce:	50 93 b1 06 	sts	0x06B1, r21	; 0x8006b1 <register_address_org+0x15>
 1d2:	60 93 b2 06 	sts	0x06B2, r22	; 0x8006b2 <register_address_org+0x16>
 1d6:	70 93 b3 06 	sts	0x06B3, r23	; 0x8006b3 <register_address_org+0x17>
 1da:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <register_address_org+0x18>
 1de:	90 93 b5 06 	sts	0x06B5, r25	; 0x8006b5 <register_address_org+0x19>
 1e2:	a0 93 b6 06 	sts	0x06B6, r26	; 0x8006b6 <register_address_org+0x1a>
 1e6:	b0 93 b7 06 	sts	0x06B7, r27	; 0x8006b7 <register_address_org+0x1b>
 1ea:	c0 93 b8 06 	sts	0x06B8, r28	; 0x8006b8 <register_address_org+0x1c>
 1ee:	d0 93 b9 06 	sts	0x06B9, r29	; 0x8006b9 <register_address_org+0x1d>
 1f2:	e0 93 ba 06 	sts	0x06BA, r30	; 0x8006ba <register_address_org+0x1e>
 1f6:	f0 93 bb 06 	sts	0x06BB, r31	; 0x8006bb <register_address_org+0x1f>
 1fa:	ed b6       	in	r14, 0x3d	; 61
 1fc:	fe b6       	in	r15, 0x3e	; 62
 1fe:	e0 92 c9 06 	sts	0x06C9, r14	; 0x8006c9 <stackpointer_address_org>
 202:	f0 92 ca 06 	sts	0x06CA, r15	; 0x8006ca <stackpointer_address_org+0x1>
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <stackpointer_address_org>
 20e:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <stackpointer_address_org+0x1>
 212:	e0 ec       	ldi	r30, 0xC0	; 192
 214:	f6 e0       	ldi	r31, 0x06	; 6
 216:	ed 90       	ld	r14, X+
 218:	e1 92       	st	Z+, r14
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	89 30       	cpi	r24, 0x09	; 9
 21e:	d9 f7       	brne	.-10     	; 0x216 <binarysearch_binary_search+0xce>
 220:	e0 90 aa 06 	lds	r14, 0x06AA	; 0x8006aa <register_address_org+0xe>
 224:	f0 90 ab 06 	lds	r15, 0x06AB	; 0x8006ab <register_address_org+0xf>
 228:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <register_address_org+0x18>
 22c:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <register_address_org+0x19>
 230:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <register_address_org+0x1a>
 234:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <register_address_org+0x1b>
 238:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <register_address_org+0x1e>
 23c:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <register_address_org+0x1f>

00000240 <Tic_flag>:
	"lds	r27, 0x6b7\n\t"
	"lds	r30, 0x6ba\n\t"
	"lds	r31, 0x6bb\n\t"
	);
	asm("Tic_flag:");
      up = low - 1;
 240:	ab 01       	movw	r20, r22
 242:	41 50       	subi	r20, 0x01	; 1
 244:	51 09       	sbc	r21, r1
      fvalue = binarysearch_data[ mid ].value;
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	f9 01       	movw	r30, r18
 250:	e6 5e       	subi	r30, 0xE6	; 230
 252:	f9 4f       	sbci	r31, 0xF9	; 249
 254:	a2 81       	ldd	r26, Z+2	; 0x02
 256:	b3 81       	ldd	r27, Z+3	; 0x03

00000258 <Toc_flag>:
	asm("Toc_flag:");
 258:	0a c0       	rjmp	.+20     	; 0x26e <Toc_flag+0x16>
    } else

    if ( binarysearch_data[ mid ].key > x )
 25a:	8e 17       	cp	r24, r30
 25c:	9f 07       	cpc	r25, r31
 25e:	24 f4       	brge	.+8      	; 0x268 <Toc_flag+0x10>
      /* Item not found */
      up = mid - 1;
 260:	a9 01       	movw	r20, r18
 262:	41 50       	subi	r20, 0x01	; 1
 264:	51 09       	sbc	r21, r1
 266:	03 c0       	rjmp	.+6      	; 0x26e <Toc_flag+0x16>
    else
      low = mid + 1;
 268:	b9 01       	movw	r22, r18
 26a:	6f 5f       	subi	r22, 0xFF	; 255
 26c:	7f 4f       	sbci	r23, 0xFF	; 255
  low = 0;
  up = 14;
  fvalue = -1;

  _Pragma( "loopbound min 1 max 4" )
  while ( low <= up ) {
 26e:	46 17       	cp	r20, r22
 270:	57 07       	cpc	r21, r23
 272:	0c f0       	brlt	.+2      	; 0x276 <Toc_flag+0x1e>
 274:	6f cf       	rjmp	.-290    	; 0x154 <binarysearch_binary_search+0xc>
    else
      low = mid + 1;
  }

  return( fvalue );
}
 276:	cd 01       	movw	r24, r26
 278:	08 95       	ret

0000027a <binarysearch_main>:
  Main functions
*/

void _Pragma( "entrypoint" ) binarysearch_main( void )
{
  binarysearch_result = binarysearch_binary_search( 8 );
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	64 df       	rcall	.-312    	; 0x148 <binarysearch_binary_search>
 280:	90 93 59 06 	sts	0x0659, r25	; 0x800659 <binarysearch_result+0x1>
 284:	80 93 58 06 	sts	0x0658, r24	; 0x800658 <binarysearch_result>
 288:	08 95       	ret

0000028a <blockInputUpdate>:
int mid_block;
 
/*Block input update*/

void blockInputUpdate(int blockInputUpdate_i) 
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
	low_block = low_inputs[blockInputUpdate_i];
 28e:	9c 01       	movw	r18, r24
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	f9 01       	movw	r30, r18
 296:	e8 52       	subi	r30, 0x28	; 40
 298:	fa 4f       	sbci	r31, 0xFA	; 250
 29a:	40 81       	ld	r20, Z
 29c:	51 81       	ldd	r21, Z+1	; 0x01
 29e:	50 93 97 06 	sts	0x0697, r21	; 0x800697 <low_block+0x1>
 2a2:	40 93 96 06 	sts	0x0696, r20	; 0x800696 <low_block>
	mid_block = mid_inputs[blockInputUpdate_i];
 2a6:	f9 01       	movw	r30, r18
 2a8:	e0 55       	subi	r30, 0x50	; 80
 2aa:	fa 4f       	sbci	r31, 0xFA	; 250
 2ac:	20 81       	ld	r18, Z
 2ae:	31 81       	ldd	r19, Z+1	; 0x01
 2b0:	30 93 99 06 	sts	0x0699, r19	; 0x800699 <mid_block+0x1>
 2b4:	20 93 98 06 	sts	0x0698, r18	; 0x800698 <mid_block>
 2b8:	2e e1       	ldi	r18, 0x1E	; 30
 2ba:	28 9f       	mul	r18, r24
 2bc:	d0 01       	movw	r26, r0
 2be:	29 9f       	mul	r18, r25
 2c0:	b0 0d       	add	r27, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	ed 01       	movw	r28, r26
 2c6:	c8 5a       	subi	r28, 0xA8	; 168
 2c8:	dc 4f       	sbci	r29, 0xFC	; 252
 2ca:	ea e5       	ldi	r30, 0x5A	; 90
 2cc:	f6 e0       	ldi	r31, 0x06	; 6
 2ce:	a0 50       	subi	r26, 0x00	; 0
 2d0:	bf 4f       	sbci	r27, 0xFF	; 255
 2d2:	26 e9       	ldi	r18, 0x96	; 150
 2d4:	36 e0       	ldi	r19, 0x06	; 6
	int binarysearch_data_block_counter0;
	for(binarysearch_data_block_counter0=0;binarysearch_data_block_counter0<15;binarysearch_data_block_counter0++){
		binarysearch_data_block[binarysearch_data_block_counter0].key=binarysearch_data_key_inputs[blockInputUpdate_i][binarysearch_data_block_counter0];
 2d6:	89 91       	ld	r24, Y+
 2d8:	99 91       	ld	r25, Y+
 2da:	91 83       	std	Z+1, r25	; 0x01
 2dc:	80 83       	st	Z, r24
		binarysearch_data_block[binarysearch_data_block_counter0].value=binarysearch_data_value_inputs[blockInputUpdate_i][binarysearch_data_block_counter0];
 2de:	8d 91       	ld	r24, X+
 2e0:	9d 91       	ld	r25, X+
 2e2:	93 83       	std	Z+3, r25	; 0x03
 2e4:	82 83       	std	Z+2, r24	; 0x02
 2e6:	34 96       	adiw	r30, 0x04	; 4
void blockInputUpdate(int blockInputUpdate_i) 
{
	low_block = low_inputs[blockInputUpdate_i];
	mid_block = mid_inputs[blockInputUpdate_i];
	int binarysearch_data_block_counter0;
	for(binarysearch_data_block_counter0=0;binarysearch_data_block_counter0<15;binarysearch_data_block_counter0++){
 2e8:	e2 17       	cp	r30, r18
 2ea:	f3 07       	cpc	r31, r19
 2ec:	a1 f7       	brne	.-24     	; 0x2d6 <blockInputUpdate+0x4c>
		binarysearch_data_block[binarysearch_data_block_counter0].value=binarysearch_data_value_inputs[blockInputUpdate_i][binarysearch_data_block_counter0];
	}

	 

} 
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <benchmarkBlock>:
 
/*BLock execution time measurement*/
void benchmarkBlock(void)
{
	asm(
 2f4:	00 92 cb 06 	sts	0x06CB, r0	; 0x8006cb <register_address_block>
 2f8:	10 92 cc 06 	sts	0x06CC, r1	; 0x8006cc <register_address_block+0x1>
 2fc:	20 92 cd 06 	sts	0x06CD, r2	; 0x8006cd <register_address_block+0x2>
 300:	30 92 ce 06 	sts	0x06CE, r3	; 0x8006ce <register_address_block+0x3>
 304:	40 92 cf 06 	sts	0x06CF, r4	; 0x8006cf <register_address_block+0x4>
 308:	50 92 d0 06 	sts	0x06D0, r5	; 0x8006d0 <register_address_block+0x5>
 30c:	60 92 d1 06 	sts	0x06D1, r6	; 0x8006d1 <register_address_block+0x6>
 310:	70 92 d2 06 	sts	0x06D2, r7	; 0x8006d2 <register_address_block+0x7>
 314:	80 92 d3 06 	sts	0x06D3, r8	; 0x8006d3 <register_address_block+0x8>
 318:	90 92 d4 06 	sts	0x06D4, r9	; 0x8006d4 <register_address_block+0x9>
 31c:	a0 92 d5 06 	sts	0x06D5, r10	; 0x8006d5 <register_address_block+0xa>
 320:	b0 92 d6 06 	sts	0x06D6, r11	; 0x8006d6 <register_address_block+0xb>
 324:	c0 92 d7 06 	sts	0x06D7, r12	; 0x8006d7 <register_address_block+0xc>
 328:	d0 92 d8 06 	sts	0x06D8, r13	; 0x8006d8 <register_address_block+0xd>
 32c:	e0 92 d9 06 	sts	0x06D9, r14	; 0x8006d9 <register_address_block+0xe>
 330:	f0 92 da 06 	sts	0x06DA, r15	; 0x8006da <register_address_block+0xf>
 334:	00 93 db 06 	sts	0x06DB, r16	; 0x8006db <register_address_block+0x10>
 338:	10 93 dc 06 	sts	0x06DC, r17	; 0x8006dc <register_address_block+0x11>
 33c:	20 93 dd 06 	sts	0x06DD, r18	; 0x8006dd <register_address_block+0x12>
 340:	30 93 de 06 	sts	0x06DE, r19	; 0x8006de <register_address_block+0x13>
 344:	40 93 df 06 	sts	0x06DF, r20	; 0x8006df <register_address_block+0x14>
 348:	50 93 e0 06 	sts	0x06E0, r21	; 0x8006e0 <register_address_block+0x15>
 34c:	60 93 e1 06 	sts	0x06E1, r22	; 0x8006e1 <register_address_block+0x16>
 350:	70 93 e2 06 	sts	0x06E2, r23	; 0x8006e2 <register_address_block+0x17>
 354:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <register_address_block+0x18>
 358:	90 93 e4 06 	sts	0x06E4, r25	; 0x8006e4 <register_address_block+0x19>
 35c:	a0 93 e5 06 	sts	0x06E5, r26	; 0x8006e5 <register_address_block+0x1a>
 360:	b0 93 e6 06 	sts	0x06E6, r27	; 0x8006e6 <register_address_block+0x1b>
 364:	c0 93 e7 06 	sts	0x06E7, r28	; 0x8006e7 <register_address_block+0x1c>
 368:	d0 93 e8 06 	sts	0x06E8, r29	; 0x8006e8 <register_address_block+0x1d>
 36c:	e0 93 e9 06 	sts	0x06E9, r30	; 0x8006e9 <register_address_block+0x1e>
 370:	f0 93 ea 06 	sts	0x06EA, r31	; 0x8006ea <register_address_block+0x1f>
 374:	ed b6       	in	r14, 0x3d	; 61
 376:	fe b6       	in	r15, 0x3e	; 62
 378:	e0 92 be 06 	sts	0x06BE, r14	; 0x8006be <stackpointer_address_block>
 37c:	f0 92 bf 06 	sts	0x06BF, r15	; 0x8006bf <stackpointer_address_block+0x1>
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <stackpointer_address_block>
 388:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <stackpointer_address_block+0x1>
 38c:	eb ee       	ldi	r30, 0xEB	; 235
 38e:	f6 e0       	ldi	r31, 0x06	; 6
 390:	ed 90       	ld	r14, X+
 392:	e1 92       	st	Z+, r14
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	85 32       	cpi	r24, 0x25	; 37
 398:	d9 f7       	brne	.-10     	; 0x390 <benchmarkBlock+0x9c>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	a0 91 c9 06 	lds	r26, 0x06C9	; 0x8006c9 <stackpointer_address_org>
 3a2:	b0 91 ca 06 	lds	r27, 0x06CA	; 0x8006ca <stackpointer_address_org+0x1>
 3a6:	e0 ec       	ldi	r30, 0xC0	; 192
 3a8:	f6 e0       	ldi	r31, 0x06	; 6
 3aa:	e1 90       	ld	r14, Z+
 3ac:	ed 92       	st	X+, r14
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	89 30       	cpi	r24, 0x09	; 9
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <benchmarkBlock+0xb6>
 3b4:	00 90 9c 06 	lds	r0, 0x069C	; 0x80069c <register_address_org>
 3b8:	10 90 9d 06 	lds	r1, 0x069D	; 0x80069d <register_address_org+0x1>
 3bc:	20 90 9e 06 	lds	r2, 0x069E	; 0x80069e <register_address_org+0x2>
 3c0:	30 90 9f 06 	lds	r3, 0x069F	; 0x80069f <register_address_org+0x3>
 3c4:	40 90 a0 06 	lds	r4, 0x06A0	; 0x8006a0 <register_address_org+0x4>
 3c8:	50 90 a1 06 	lds	r5, 0x06A1	; 0x8006a1 <register_address_org+0x5>
 3cc:	60 90 a2 06 	lds	r6, 0x06A2	; 0x8006a2 <register_address_org+0x6>
 3d0:	70 90 a3 06 	lds	r7, 0x06A3	; 0x8006a3 <register_address_org+0x7>
 3d4:	80 90 a4 06 	lds	r8, 0x06A4	; 0x8006a4 <register_address_org+0x8>
 3d8:	90 90 a5 06 	lds	r9, 0x06A5	; 0x8006a5 <register_address_org+0x9>
 3dc:	a0 90 a6 06 	lds	r10, 0x06A6	; 0x8006a6 <register_address_org+0xa>
 3e0:	b0 90 a7 06 	lds	r11, 0x06A7	; 0x8006a7 <register_address_org+0xb>
 3e4:	c0 90 a8 06 	lds	r12, 0x06A8	; 0x8006a8 <register_address_org+0xc>
 3e8:	d0 90 a9 06 	lds	r13, 0x06A9	; 0x8006a9 <register_address_org+0xd>
 3ec:	e0 90 aa 06 	lds	r14, 0x06AA	; 0x8006aa <register_address_org+0xe>
 3f0:	f0 90 ab 06 	lds	r15, 0x06AB	; 0x8006ab <register_address_org+0xf>
 3f4:	00 91 ac 06 	lds	r16, 0x06AC	; 0x8006ac <register_address_org+0x10>
 3f8:	10 91 ad 06 	lds	r17, 0x06AD	; 0x8006ad <register_address_org+0x11>
 3fc:	20 91 ae 06 	lds	r18, 0x06AE	; 0x8006ae <register_address_org+0x12>
 400:	30 91 af 06 	lds	r19, 0x06AF	; 0x8006af <register_address_org+0x13>
 404:	40 91 b0 06 	lds	r20, 0x06B0	; 0x8006b0 <register_address_org+0x14>
 408:	50 91 b1 06 	lds	r21, 0x06B1	; 0x8006b1 <register_address_org+0x15>
 40c:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <register_address_org+0x16>
 410:	70 91 b3 06 	lds	r23, 0x06B3	; 0x8006b3 <register_address_org+0x17>
 414:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <register_address_org+0x18>
 418:	90 91 b5 06 	lds	r25, 0x06B5	; 0x8006b5 <register_address_org+0x19>
 41c:	a0 91 b6 06 	lds	r26, 0x06B6	; 0x8006b6 <register_address_org+0x1a>
 420:	b0 91 b7 06 	lds	r27, 0x06B7	; 0x8006b7 <register_address_org+0x1b>
 424:	c0 91 b8 06 	lds	r28, 0x06B8	; 0x8006b8 <register_address_org+0x1c>
 428:	d0 91 b9 06 	lds	r29, 0x06B9	; 0x8006b9 <register_address_org+0x1d>
 42c:	e0 91 ba 06 	lds	r30, 0x06BA	; 0x8006ba <register_address_org+0x1e>
 430:	f0 91 bb 06 	lds	r31, 0x06BB	; 0x8006bb <register_address_org+0x1f>
 434:	80 e1       	ldi	r24, 0x10	; 16
 436:	88 b9       	out	0x08, r24	; 8
 438:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <register_address_org+0x18>

0000043c <BlockContent_Start>:
 43c:	ab 01       	movw	r20, r22
 43e:	41 50       	subi	r20, 0x01	; 1
 440:	51 09       	sbc	r21, r1
 442:	22 0f       	add	r18, r18
 444:	33 1f       	adc	r19, r19
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	f9 01       	movw	r30, r18
 44c:	e6 5e       	subi	r30, 0xE6	; 230
 44e:	f9 4f       	sbci	r31, 0xF9	; 249
 450:	a2 81       	ldd	r26, Z+2	; 0x02
 452:	b3 81       	ldd	r27, Z+3	; 0x03

00000454 <BlockContent_End>:
 454:	18 b8       	out	0x08, r1	; 8
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <stackpointer_address_block>
 45e:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <stackpointer_address_block+0x1>
 462:	eb ee       	ldi	r30, 0xEB	; 235
 464:	f6 e0       	ldi	r31, 0x06	; 6
 466:	e1 90       	ld	r14, Z+
 468:	ed 92       	st	X+, r14
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	85 32       	cpi	r24, 0x25	; 37
 46e:	d9 f7       	brne	.-10     	; 0x466 <BlockContent_End+0x12>
 470:	00 90 cb 06 	lds	r0, 0x06CB	; 0x8006cb <register_address_block>
 474:	10 90 cc 06 	lds	r1, 0x06CC	; 0x8006cc <register_address_block+0x1>
 478:	20 90 cd 06 	lds	r2, 0x06CD	; 0x8006cd <register_address_block+0x2>
 47c:	30 90 ce 06 	lds	r3, 0x06CE	; 0x8006ce <register_address_block+0x3>
 480:	40 90 cf 06 	lds	r4, 0x06CF	; 0x8006cf <register_address_block+0x4>
 484:	50 90 d0 06 	lds	r5, 0x06D0	; 0x8006d0 <register_address_block+0x5>
 488:	60 90 d1 06 	lds	r6, 0x06D1	; 0x8006d1 <register_address_block+0x6>
 48c:	70 90 d2 06 	lds	r7, 0x06D2	; 0x8006d2 <register_address_block+0x7>
 490:	80 90 d3 06 	lds	r8, 0x06D3	; 0x8006d3 <register_address_block+0x8>
 494:	90 90 d4 06 	lds	r9, 0x06D4	; 0x8006d4 <register_address_block+0x9>
 498:	a0 90 d5 06 	lds	r10, 0x06D5	; 0x8006d5 <register_address_block+0xa>
 49c:	b0 90 d6 06 	lds	r11, 0x06D6	; 0x8006d6 <register_address_block+0xb>
 4a0:	c0 90 d7 06 	lds	r12, 0x06D7	; 0x8006d7 <register_address_block+0xc>
 4a4:	d0 90 d8 06 	lds	r13, 0x06D8	; 0x8006d8 <register_address_block+0xd>
 4a8:	e0 90 d9 06 	lds	r14, 0x06D9	; 0x8006d9 <register_address_block+0xe>
 4ac:	f0 90 da 06 	lds	r15, 0x06DA	; 0x8006da <register_address_block+0xf>
 4b0:	00 91 db 06 	lds	r16, 0x06DB	; 0x8006db <register_address_block+0x10>
 4b4:	10 91 dc 06 	lds	r17, 0x06DC	; 0x8006dc <register_address_block+0x11>
 4b8:	20 91 dd 06 	lds	r18, 0x06DD	; 0x8006dd <register_address_block+0x12>
 4bc:	30 91 de 06 	lds	r19, 0x06DE	; 0x8006de <register_address_block+0x13>
 4c0:	40 91 df 06 	lds	r20, 0x06DF	; 0x8006df <register_address_block+0x14>
 4c4:	50 91 e0 06 	lds	r21, 0x06E0	; 0x8006e0 <register_address_block+0x15>
 4c8:	60 91 e1 06 	lds	r22, 0x06E1	; 0x8006e1 <register_address_block+0x16>
 4cc:	70 91 e2 06 	lds	r23, 0x06E2	; 0x8006e2 <register_address_block+0x17>
 4d0:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <register_address_block+0x18>
 4d4:	90 91 e4 06 	lds	r25, 0x06E4	; 0x8006e4 <register_address_block+0x19>
 4d8:	a0 91 e5 06 	lds	r26, 0x06E5	; 0x8006e5 <register_address_block+0x1a>
 4dc:	b0 91 e6 06 	lds	r27, 0x06E6	; 0x8006e6 <register_address_block+0x1b>
 4e0:	c0 91 e7 06 	lds	r28, 0x06E7	; 0x8006e7 <register_address_block+0x1c>
 4e4:	d0 91 e8 06 	lds	r29, 0x06E8	; 0x8006e8 <register_address_block+0x1d>
 4e8:	e0 91 e9 06 	lds	r30, 0x06E9	; 0x8006e9 <register_address_block+0x1e>
 4ec:	f0 91 ea 06 	lds	r31, 0x06EA	; 0x8006ea <register_address_block+0x1f>
 4f0:	e0 90 d9 06 	lds	r14, 0x06D9	; 0x8006d9 <register_address_block+0xe>
 4f4:	f0 90 da 06 	lds	r15, 0x06DA	; 0x8006da <register_address_block+0xf>
 4f8:	08 95       	ret

000004fa <uart_putchar>:
	}
}

/*USART*/
int uart_putchar(char c, FILE *stream)
{
 4fa:	cf 93       	push	r28
 4fc:	c8 2f       	mov	r28, r24
	if (c == '\n') uart_putchar('\r', stream);
 4fe:	8a 30       	cpi	r24, 0x0A	; 10
 500:	11 f4       	brne	.+4      	; 0x506 <uart_putchar+0xc>
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	fa df       	rcall	.-12     	; 0x4fa <uart_putchar>
	while( ! ( UCSR0A & (1 << UDRE0)));
 506:	e0 ec       	ldi	r30, 0xC0	; 192
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	90 81       	ld	r25, Z
 50c:	95 ff       	sbrs	r25, 5
 50e:	fd cf       	rjmp	.-6      	; 0x50a <uart_putchar+0x10>
	UDR0 = c;
 510:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <main>:
volatile char stackpointer_address_org[pointer_length];
volatile char stackpointer_address_block[pointer_length];
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_RW); 

/*main function*/
int main(void){
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29

	/*Initialize the pointer and register address variables*/
	int x_registercounter;
	for(x_registercounter=0; x_registercounter < pointer_length; x_registercounter++){
		register_address_r14r15[x_registercounter]=0;
 520:	8c eb       	ldi	r24, 0xBC	; 188
 522:	96 e0       	ldi	r25, 0x06	; 6
 524:	dc 01       	movw	r26, r24
 526:	1c 92       	st	X, r1
		framepointer_address[x_registercounter]=0;
 528:	ca e9       	ldi	r28, 0x9A	; 154
 52a:	d6 e0       	ldi	r29, 0x06	; 6
 52c:	18 82       	st	Y, r1
		stackpointer_address_org[x_registercounter]=0;
 52e:	29 ec       	ldi	r18, 0xC9	; 201
 530:	36 e0       	ldi	r19, 0x06	; 6
 532:	f9 01       	movw	r30, r18
 534:	10 82       	st	Z, r1
		stackpointer_address_block[x_registercounter]=0 ;stackpointer_address_block[x_registercounter]=0 ;
 536:	ee eb       	ldi	r30, 0xBE	; 190
 538:	f6 e0       	ldi	r31, 0x06	; 6
 53a:	10 82       	st	Z, r1
 53c:	10 82       	st	Z, r1
int main(void){

	/*Initialize the pointer and register address variables*/
	int x_registercounter;
	for(x_registercounter=0; x_registercounter < pointer_length; x_registercounter++){
		register_address_r14r15[x_registercounter]=0;
 53e:	11 96       	adiw	r26, 0x01	; 1
 540:	1c 92       	st	X, r1
		framepointer_address[x_registercounter]=0;
 542:	19 82       	std	Y+1, r1	; 0x01
		stackpointer_address_org[x_registercounter]=0;
 544:	d9 01       	movw	r26, r18
 546:	11 96       	adiw	r26, 0x01	; 1
 548:	1c 92       	st	X, r1
		stackpointer_address_block[x_registercounter]=0 ;stackpointer_address_block[x_registercounter]=0 ;
 54a:	11 82       	std	Z+1, r1	; 0x01
 54c:	11 82       	std	Z+1, r1	; 0x01
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
	}
	for(x_registercounter=0; x_registercounter < register_length; x_registercounter++){
	register_address_org[x_registercounter];
 552:	fc 01       	movw	r30, r24
 554:	e4 56       	subi	r30, 0x64	; 100
 556:	f9 4f       	sbci	r31, 0xF9	; 249
 558:	20 81       	ld	r18, Z
	register_address_block[x_registercounter];
 55a:	fc 01       	movw	r30, r24
 55c:	e5 53       	subi	r30, 0x35	; 53
 55e:	f9 4f       	sbci	r31, 0xF9	; 249
 560:	20 81       	ld	r18, Z
		register_address_r14r15[x_registercounter]=0;
		framepointer_address[x_registercounter]=0;
		stackpointer_address_org[x_registercounter]=0;
		stackpointer_address_block[x_registercounter]=0 ;stackpointer_address_block[x_registercounter]=0 ;
	}
	for(x_registercounter=0; x_registercounter < register_length; x_registercounter++){
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	80 32       	cpi	r24, 0x20	; 32
 566:	91 05       	cpc	r25, r1
 568:	a1 f7       	brne	.-24     	; 0x552 <main+0x36>
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
	register_address_org[x_registercounter];
	register_address_block[x_registercounter];
	}
	for(x_registercounter=0; x_registercounter < stack_length_org; x_registercounter++){
	stack_address_org[x_registercounter];
 56e:	fc 01       	movw	r30, r24
 570:	e0 54       	subi	r30, 0x40	; 64
 572:	f9 4f       	sbci	r31, 0xF9	; 249
 574:	20 81       	ld	r18, Z
	}
	for(x_registercounter=0; x_registercounter < register_length; x_registercounter++){
	register_address_org[x_registercounter];
	register_address_block[x_registercounter];
	}
	for(x_registercounter=0; x_registercounter < stack_length_org; x_registercounter++){
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	89 30       	cpi	r24, 0x09	; 9
 57a:	91 05       	cpc	r25, r1
 57c:	c1 f7       	brne	.-16     	; 0x56e <main+0x52>
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
	stack_address_org[x_registercounter];
	}
	for(x_registercounter=0; x_registercounter < stack_length_block; x_registercounter++){
	stack_address_block[x_registercounter];
 582:	fc 01       	movw	r30, r24
 584:	e5 51       	subi	r30, 0x15	; 21
 586:	f9 4f       	sbci	r31, 0xF9	; 249
 588:	20 81       	ld	r18, Z
	register_address_block[x_registercounter];
	}
	for(x_registercounter=0; x_registercounter < stack_length_org; x_registercounter++){
	stack_address_org[x_registercounter];
	}
	for(x_registercounter=0; x_registercounter < stack_length_block; x_registercounter++){
 58a:	01 96       	adiw	r24, 0x01	; 1
 58c:	89 31       	cpi	r24, 0x19	; 25
 58e:	91 05       	cpc	r25, r1
 590:	c1 f7       	brne	.-16     	; 0x582 <main+0x66>
	stack_address_block[x_registercounter];
	}
	asm(
 592:	ed b6       	in	r14, 0x3d	; 61
 594:	fe b6       	in	r15, 0x3e	; 62
 596:	e0 92 9a 06 	sts	0x069A, r14	; 0x80069a <framepointer_address>
 59a:	f0 92 9b 06 	sts	0x069B, r15	; 0x80069b <framepointer_address+0x1>
	"in	r15, 0x3e\n\t"
	"sts	0x069a, r14\n\t"
	"sts	0x69b, r15\n\t"
	);
	/*GPIO Pins*/
	DDRA = 0x00;
 59e:	11 b8       	out	0x01, r1	; 1
	DDRC = 0xF0;
 5a0:	80 ef       	ldi	r24, 0xF0	; 240
 5a2:	87 b9       	out	0x07, r24	; 7
	/*External interrupt settings*/
	PORTD = (1 << PD1);
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	8b b9       	out	0x0b, r24	; 11
	EICRA =	(1 << ISC11) | (0 << ISC10);
 5a8:	98 e0       	ldi	r25, 0x08	; 8
 5aa:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1 << INT1);
 5ae:	8d bb       	out	0x1d, r24	; 29
	/*Serial port configuration*/
	UBRR0H = (RBAUD >> 8);
 5b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  RBAUD;
 5b4:	83 e3       	ldi	r24, 0x33	; 51
 5b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
 5ba:	88 e1       	ldi	r24, 0x18	; 24
 5bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	/*Execute the complete original code*/
	binarysearch_init();
 5c6:	a0 dd       	rcall	.-1216   	; 0x108 <binarysearch_init>
	binarysearch_main();
 5c8:	58 de       	rcall	.-848    	; 0x27a <binarysearch_main>
	binarysearch_return();
 5ca:	b9 dd       	rcall	.-1166   	; 0x13e <binarysearch_return>
	/*Enable FPGA Interupt trigger*/
	PORTC = (1 << PC5);
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	88 b9       	out	0x08, r24	; 8
	PORTC = (0 << PC5);
 5d0:	18 b8       	out	0x08, r1	; 8
	/*Enable external interrupt handler*/
	sei();
 5d2:	78 94       	sei
	/*while loop*/
	while(measurementRoundCounter<20){}
 5d4:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__data_end>
 5d8:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <__data_end+0x1>
 5dc:	84 31       	cpi	r24, 0x14	; 20
 5de:	91 05       	cpc	r25, r1
 5e0:	ec f3       	brlt	.-6      	; 0x5dc <main+0xc0>
	/*Return*/
	return(1);
}
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <__vector_2>:

/*Interrupt handler*/
ISR(INT1_vect){
 5ec:	1f 92       	push	r1
 5ee:	0f 92       	push	r0
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	0f 92       	push	r0
 5f4:	11 24       	eor	r1, r1
 5f6:	0b b6       	in	r0, 0x3b	; 59
 5f8:	0f 92       	push	r0
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	2f 93       	push	r18
 600:	3f 93       	push	r19
 602:	4f 93       	push	r20
 604:	5f 93       	push	r21
 606:	6f 93       	push	r22
 608:	7f 93       	push	r23
 60a:	8f 93       	push	r24
 60c:	9f 93       	push	r25
 60e:	af 93       	push	r26
 610:	bf 93       	push	r27
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ef 93       	push	r30
 618:	ff 93       	push	r31

	/*Read input values*/
	blockInputUpdate(measurementRoundCounter);
 61a:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__data_end>
 61e:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <__data_end+0x1>
 622:	33 de       	rcall	.-922    	; 0x28a <blockInputUpdate>
	/*Measure the execution time of the code block*/
	benchmarkBlock();
 624:	67 de       	rcall	.-818    	; 0x2f4 <benchmarkBlock>
	/*Update measurement round counter*/
	measurementRoundCounter++;
 626:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__data_end>
 62a:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <__data_end+0x1>
 62e:	01 96       	adiw	r24, 0x01	; 1
 630:	90 93 19 06 	sts	0x0619, r25	; 0x800619 <__data_end+0x1>
 634:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__data_end>
	/*Print pointer values*/
	if(measurementRoundCounter==1){
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	99 f5       	brne	.+102    	; 0x6a2 <__vector_2+0xb6>
		fprintf(&mystdout,"%02x%02x\n",framepointer_address[1],framepointer_address[0]);
 63c:	ea e9       	ldi	r30, 0x9A	; 154
 63e:	f6 e0       	ldi	r31, 0x06	; 6
 640:	90 81       	ld	r25, Z
 642:	81 81       	ldd	r24, Z+1	; 0x01
 644:	1f 92       	push	r1
 646:	9f 93       	push	r25
 648:	1f 92       	push	r1
 64a:	8f 93       	push	r24
 64c:	0e e0       	ldi	r16, 0x0E	; 14
 64e:	16 e0       	ldi	r17, 0x06	; 6
 650:	1f 93       	push	r17
 652:	0f 93       	push	r16
 654:	c0 e0       	ldi	r28, 0x00	; 0
 656:	d6 e0       	ldi	r29, 0x06	; 6
 658:	df 93       	push	r29
 65a:	cf 93       	push	r28
 65c:	60 d0       	rcall	.+192    	; 0x71e <fprintf>
		fprintf(&mystdout,"%02x%02x\n",stackpointer_address_org[1],stackpointer_address_org[0]);
 65e:	e9 ec       	ldi	r30, 0xC9	; 201
 660:	f6 e0       	ldi	r31, 0x06	; 6
 662:	90 81       	ld	r25, Z
 664:	81 81       	ldd	r24, Z+1	; 0x01
 666:	1f 92       	push	r1
 668:	9f 93       	push	r25
 66a:	1f 92       	push	r1
 66c:	8f 93       	push	r24
 66e:	1f 93       	push	r17
 670:	0f 93       	push	r16
 672:	df 93       	push	r29
 674:	cf 93       	push	r28
 676:	53 d0       	rcall	.+166    	; 0x71e <fprintf>
		fprintf(&mystdout,"%02x%02x\n",stackpointer_address_block[1],stackpointer_address_block[0]);
 678:	ee eb       	ldi	r30, 0xBE	; 190
 67a:	f6 e0       	ldi	r31, 0x06	; 6
 67c:	90 81       	ld	r25, Z
 67e:	81 81       	ldd	r24, Z+1	; 0x01
 680:	1f 92       	push	r1
 682:	9f 93       	push	r25
 684:	1f 92       	push	r1
 686:	8f 93       	push	r24
 688:	1f 93       	push	r17
 68a:	0f 93       	push	r16
 68c:	df 93       	push	r29
 68e:	cf 93       	push	r28
 690:	46 d0       	rcall	.+140    	; 0x71e <fprintf>
 692:	8d b7       	in	r24, 0x3d	; 61
 694:	9e b7       	in	r25, 0x3e	; 62
 696:	48 96       	adiw	r24, 0x18	; 24
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	9e bf       	out	0x3e, r25	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	8d bf       	out	0x3d, r24	; 61
	}
}
 6a2:	ff 91       	pop	r31
 6a4:	ef 91       	pop	r30
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	bf 91       	pop	r27
 6ac:	af 91       	pop	r26
 6ae:	9f 91       	pop	r25
 6b0:	8f 91       	pop	r24
 6b2:	7f 91       	pop	r23
 6b4:	6f 91       	pop	r22
 6b6:	5f 91       	pop	r21
 6b8:	4f 91       	pop	r20
 6ba:	3f 91       	pop	r19
 6bc:	2f 91       	pop	r18
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	0f 90       	pop	r0
 6c4:	0b be       	out	0x3b, r0	; 59
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <__divmodhi4>:
 6d0:	97 fb       	bst	r25, 7
 6d2:	07 2e       	mov	r0, r23
 6d4:	16 f4       	brtc	.+4      	; 0x6da <__divmodhi4+0xa>
 6d6:	00 94       	com	r0
 6d8:	06 d0       	rcall	.+12     	; 0x6e6 <__divmodhi4_neg1>
 6da:	77 fd       	sbrc	r23, 7
 6dc:	08 d0       	rcall	.+16     	; 0x6ee <__divmodhi4_neg2>
 6de:	0b d0       	rcall	.+22     	; 0x6f6 <__udivmodhi4>
 6e0:	07 fc       	sbrc	r0, 7
 6e2:	05 d0       	rcall	.+10     	; 0x6ee <__divmodhi4_neg2>
 6e4:	3e f4       	brtc	.+14     	; 0x6f4 <__divmodhi4_exit>

000006e6 <__divmodhi4_neg1>:
 6e6:	90 95       	com	r25
 6e8:	81 95       	neg	r24
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__divmodhi4_neg2>:
 6ee:	70 95       	com	r23
 6f0:	61 95       	neg	r22
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255

000006f4 <__divmodhi4_exit>:
 6f4:	08 95       	ret

000006f6 <__udivmodhi4>:
 6f6:	aa 1b       	sub	r26, r26
 6f8:	bb 1b       	sub	r27, r27
 6fa:	51 e1       	ldi	r21, 0x11	; 17
 6fc:	07 c0       	rjmp	.+14     	; 0x70c <__udivmodhi4_ep>

000006fe <__udivmodhi4_loop>:
 6fe:	aa 1f       	adc	r26, r26
 700:	bb 1f       	adc	r27, r27
 702:	a6 17       	cp	r26, r22
 704:	b7 07       	cpc	r27, r23
 706:	10 f0       	brcs	.+4      	; 0x70c <__udivmodhi4_ep>
 708:	a6 1b       	sub	r26, r22
 70a:	b7 0b       	sbc	r27, r23

0000070c <__udivmodhi4_ep>:
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	5a 95       	dec	r21
 712:	a9 f7       	brne	.-22     	; 0x6fe <__udivmodhi4_loop>
 714:	80 95       	com	r24
 716:	90 95       	com	r25
 718:	bc 01       	movw	r22, r24
 71a:	cd 01       	movw	r24, r26
 71c:	08 95       	ret

0000071e <fprintf>:
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	ae 01       	movw	r20, r28
 728:	47 5f       	subi	r20, 0xF7	; 247
 72a:	5f 4f       	sbci	r21, 0xFF	; 255
 72c:	6f 81       	ldd	r22, Y+7	; 0x07
 72e:	78 85       	ldd	r23, Y+8	; 0x08
 730:	8d 81       	ldd	r24, Y+5	; 0x05
 732:	9e 81       	ldd	r25, Y+6	; 0x06
 734:	03 d0       	rcall	.+6      	; 0x73c <vfprintf>
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	08 95       	ret

0000073c <vfprintf>:
 73c:	2f 92       	push	r2
 73e:	3f 92       	push	r3
 740:	4f 92       	push	r4
 742:	5f 92       	push	r5
 744:	6f 92       	push	r6
 746:	7f 92       	push	r7
 748:	8f 92       	push	r8
 74a:	9f 92       	push	r9
 74c:	af 92       	push	r10
 74e:	bf 92       	push	r11
 750:	cf 92       	push	r12
 752:	df 92       	push	r13
 754:	ef 92       	push	r14
 756:	ff 92       	push	r15
 758:	0f 93       	push	r16
 75a:	1f 93       	push	r17
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
 764:	2c 97       	sbiw	r28, 0x0c	; 12
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	7c 01       	movw	r14, r24
 772:	6b 01       	movw	r12, r22
 774:	8a 01       	movw	r16, r20
 776:	fc 01       	movw	r30, r24
 778:	17 82       	std	Z+7, r1	; 0x07
 77a:	16 82       	std	Z+6, r1	; 0x06
 77c:	83 81       	ldd	r24, Z+3	; 0x03
 77e:	81 ff       	sbrs	r24, 1
 780:	b0 c1       	rjmp	.+864    	; 0xae2 <vfprintf+0x3a6>
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	4c 01       	movw	r8, r24
 788:	f7 01       	movw	r30, r14
 78a:	93 81       	ldd	r25, Z+3	; 0x03
 78c:	f6 01       	movw	r30, r12
 78e:	93 fd       	sbrc	r25, 3
 790:	85 91       	lpm	r24, Z+
 792:	93 ff       	sbrs	r25, 3
 794:	81 91       	ld	r24, Z+
 796:	6f 01       	movw	r12, r30
 798:	88 23       	and	r24, r24
 79a:	09 f4       	brne	.+2      	; 0x79e <vfprintf+0x62>
 79c:	9e c1       	rjmp	.+828    	; 0xada <vfprintf+0x39e>
 79e:	85 32       	cpi	r24, 0x25	; 37
 7a0:	39 f4       	brne	.+14     	; 0x7b0 <vfprintf+0x74>
 7a2:	93 fd       	sbrc	r25, 3
 7a4:	85 91       	lpm	r24, Z+
 7a6:	93 ff       	sbrs	r25, 3
 7a8:	81 91       	ld	r24, Z+
 7aa:	6f 01       	movw	r12, r30
 7ac:	85 32       	cpi	r24, 0x25	; 37
 7ae:	21 f4       	brne	.+8      	; 0x7b8 <vfprintf+0x7c>
 7b0:	b7 01       	movw	r22, r14
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	c7 d1       	rcall	.+910    	; 0xb44 <fputc>
 7b6:	e8 cf       	rjmp	.-48     	; 0x788 <vfprintf+0x4c>
 7b8:	51 2c       	mov	r5, r1
 7ba:	31 2c       	mov	r3, r1
 7bc:	20 e0       	ldi	r18, 0x00	; 0
 7be:	20 32       	cpi	r18, 0x20	; 32
 7c0:	a0 f4       	brcc	.+40     	; 0x7ea <vfprintf+0xae>
 7c2:	8b 32       	cpi	r24, 0x2B	; 43
 7c4:	69 f0       	breq	.+26     	; 0x7e0 <vfprintf+0xa4>
 7c6:	30 f4       	brcc	.+12     	; 0x7d4 <vfprintf+0x98>
 7c8:	80 32       	cpi	r24, 0x20	; 32
 7ca:	59 f0       	breq	.+22     	; 0x7e2 <vfprintf+0xa6>
 7cc:	83 32       	cpi	r24, 0x23	; 35
 7ce:	69 f4       	brne	.+26     	; 0x7ea <vfprintf+0xae>
 7d0:	20 61       	ori	r18, 0x10	; 16
 7d2:	2c c0       	rjmp	.+88     	; 0x82c <vfprintf+0xf0>
 7d4:	8d 32       	cpi	r24, 0x2D	; 45
 7d6:	39 f0       	breq	.+14     	; 0x7e6 <vfprintf+0xaa>
 7d8:	80 33       	cpi	r24, 0x30	; 48
 7da:	39 f4       	brne	.+14     	; 0x7ea <vfprintf+0xae>
 7dc:	21 60       	ori	r18, 0x01	; 1
 7de:	26 c0       	rjmp	.+76     	; 0x82c <vfprintf+0xf0>
 7e0:	22 60       	ori	r18, 0x02	; 2
 7e2:	24 60       	ori	r18, 0x04	; 4
 7e4:	23 c0       	rjmp	.+70     	; 0x82c <vfprintf+0xf0>
 7e6:	28 60       	ori	r18, 0x08	; 8
 7e8:	21 c0       	rjmp	.+66     	; 0x82c <vfprintf+0xf0>
 7ea:	27 fd       	sbrc	r18, 7
 7ec:	27 c0       	rjmp	.+78     	; 0x83c <vfprintf+0x100>
 7ee:	30 ed       	ldi	r19, 0xD0	; 208
 7f0:	38 0f       	add	r19, r24
 7f2:	3a 30       	cpi	r19, 0x0A	; 10
 7f4:	78 f4       	brcc	.+30     	; 0x814 <vfprintf+0xd8>
 7f6:	26 ff       	sbrs	r18, 6
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0xca>
 7fa:	fa e0       	ldi	r31, 0x0A	; 10
 7fc:	5f 9e       	mul	r5, r31
 7fe:	30 0d       	add	r19, r0
 800:	11 24       	eor	r1, r1
 802:	53 2e       	mov	r5, r19
 804:	13 c0       	rjmp	.+38     	; 0x82c <vfprintf+0xf0>
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	38 9e       	mul	r3, r24
 80a:	30 0d       	add	r19, r0
 80c:	11 24       	eor	r1, r1
 80e:	33 2e       	mov	r3, r19
 810:	20 62       	ori	r18, 0x20	; 32
 812:	0c c0       	rjmp	.+24     	; 0x82c <vfprintf+0xf0>
 814:	8e 32       	cpi	r24, 0x2E	; 46
 816:	21 f4       	brne	.+8      	; 0x820 <vfprintf+0xe4>
 818:	26 fd       	sbrc	r18, 6
 81a:	5f c1       	rjmp	.+702    	; 0xada <vfprintf+0x39e>
 81c:	20 64       	ori	r18, 0x40	; 64
 81e:	06 c0       	rjmp	.+12     	; 0x82c <vfprintf+0xf0>
 820:	8c 36       	cpi	r24, 0x6C	; 108
 822:	11 f4       	brne	.+4      	; 0x828 <vfprintf+0xec>
 824:	20 68       	ori	r18, 0x80	; 128
 826:	02 c0       	rjmp	.+4      	; 0x82c <vfprintf+0xf0>
 828:	88 36       	cpi	r24, 0x68	; 104
 82a:	41 f4       	brne	.+16     	; 0x83c <vfprintf+0x100>
 82c:	f6 01       	movw	r30, r12
 82e:	93 fd       	sbrc	r25, 3
 830:	85 91       	lpm	r24, Z+
 832:	93 ff       	sbrs	r25, 3
 834:	81 91       	ld	r24, Z+
 836:	6f 01       	movw	r12, r30
 838:	81 11       	cpse	r24, r1
 83a:	c1 cf       	rjmp	.-126    	; 0x7be <vfprintf+0x82>
 83c:	98 2f       	mov	r25, r24
 83e:	9f 7d       	andi	r25, 0xDF	; 223
 840:	95 54       	subi	r25, 0x45	; 69
 842:	93 30       	cpi	r25, 0x03	; 3
 844:	28 f4       	brcc	.+10     	; 0x850 <vfprintf+0x114>
 846:	0c 5f       	subi	r16, 0xFC	; 252
 848:	1f 4f       	sbci	r17, 0xFF	; 255
 84a:	ff e3       	ldi	r31, 0x3F	; 63
 84c:	f9 83       	std	Y+1, r31	; 0x01
 84e:	0d c0       	rjmp	.+26     	; 0x86a <vfprintf+0x12e>
 850:	83 36       	cpi	r24, 0x63	; 99
 852:	31 f0       	breq	.+12     	; 0x860 <vfprintf+0x124>
 854:	83 37       	cpi	r24, 0x73	; 115
 856:	71 f0       	breq	.+28     	; 0x874 <vfprintf+0x138>
 858:	83 35       	cpi	r24, 0x53	; 83
 85a:	09 f0       	breq	.+2      	; 0x85e <vfprintf+0x122>
 85c:	57 c0       	rjmp	.+174    	; 0x90c <vfprintf+0x1d0>
 85e:	21 c0       	rjmp	.+66     	; 0x8a2 <vfprintf+0x166>
 860:	f8 01       	movw	r30, r16
 862:	80 81       	ld	r24, Z
 864:	89 83       	std	Y+1, r24	; 0x01
 866:	0e 5f       	subi	r16, 0xFE	; 254
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	44 24       	eor	r4, r4
 86c:	43 94       	inc	r4
 86e:	51 2c       	mov	r5, r1
 870:	54 01       	movw	r10, r8
 872:	14 c0       	rjmp	.+40     	; 0x89c <vfprintf+0x160>
 874:	38 01       	movw	r6, r16
 876:	f2 e0       	ldi	r31, 0x02	; 2
 878:	6f 0e       	add	r6, r31
 87a:	71 1c       	adc	r7, r1
 87c:	f8 01       	movw	r30, r16
 87e:	a0 80       	ld	r10, Z
 880:	b1 80       	ldd	r11, Z+1	; 0x01
 882:	26 ff       	sbrs	r18, 6
 884:	03 c0       	rjmp	.+6      	; 0x88c <vfprintf+0x150>
 886:	65 2d       	mov	r22, r5
 888:	70 e0       	ldi	r23, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <vfprintf+0x154>
 88c:	6f ef       	ldi	r22, 0xFF	; 255
 88e:	7f ef       	ldi	r23, 0xFF	; 255
 890:	c5 01       	movw	r24, r10
 892:	2c 87       	std	Y+12, r18	; 0x0c
 894:	4c d1       	rcall	.+664    	; 0xb2e <strnlen>
 896:	2c 01       	movw	r4, r24
 898:	83 01       	movw	r16, r6
 89a:	2c 85       	ldd	r18, Y+12	; 0x0c
 89c:	2f 77       	andi	r18, 0x7F	; 127
 89e:	22 2e       	mov	r2, r18
 8a0:	16 c0       	rjmp	.+44     	; 0x8ce <vfprintf+0x192>
 8a2:	38 01       	movw	r6, r16
 8a4:	f2 e0       	ldi	r31, 0x02	; 2
 8a6:	6f 0e       	add	r6, r31
 8a8:	71 1c       	adc	r7, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	26 ff       	sbrs	r18, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x17e>
 8b4:	65 2d       	mov	r22, r5
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x182>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	2c 87       	std	Y+12, r18	; 0x0c
 8c2:	2a d1       	rcall	.+596    	; 0xb18 <strnlen_P>
 8c4:	2c 01       	movw	r4, r24
 8c6:	2c 85       	ldd	r18, Y+12	; 0x0c
 8c8:	20 68       	ori	r18, 0x80	; 128
 8ca:	22 2e       	mov	r2, r18
 8cc:	83 01       	movw	r16, r6
 8ce:	23 fc       	sbrc	r2, 3
 8d0:	19 c0       	rjmp	.+50     	; 0x904 <vfprintf+0x1c8>
 8d2:	83 2d       	mov	r24, r3
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	48 16       	cp	r4, r24
 8d8:	59 06       	cpc	r5, r25
 8da:	a0 f4       	brcc	.+40     	; 0x904 <vfprintf+0x1c8>
 8dc:	b7 01       	movw	r22, r14
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	30 d1       	rcall	.+608    	; 0xb44 <fputc>
 8e4:	3a 94       	dec	r3
 8e6:	f5 cf       	rjmp	.-22     	; 0x8d2 <vfprintf+0x196>
 8e8:	f5 01       	movw	r30, r10
 8ea:	27 fc       	sbrc	r2, 7
 8ec:	85 91       	lpm	r24, Z+
 8ee:	27 fe       	sbrs	r2, 7
 8f0:	81 91       	ld	r24, Z+
 8f2:	5f 01       	movw	r10, r30
 8f4:	b7 01       	movw	r22, r14
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	25 d1       	rcall	.+586    	; 0xb44 <fputc>
 8fa:	31 10       	cpse	r3, r1
 8fc:	3a 94       	dec	r3
 8fe:	f1 e0       	ldi	r31, 0x01	; 1
 900:	4f 1a       	sub	r4, r31
 902:	51 08       	sbc	r5, r1
 904:	41 14       	cp	r4, r1
 906:	51 04       	cpc	r5, r1
 908:	79 f7       	brne	.-34     	; 0x8e8 <vfprintf+0x1ac>
 90a:	de c0       	rjmp	.+444    	; 0xac8 <vfprintf+0x38c>
 90c:	84 36       	cpi	r24, 0x64	; 100
 90e:	11 f0       	breq	.+4      	; 0x914 <vfprintf+0x1d8>
 910:	89 36       	cpi	r24, 0x69	; 105
 912:	31 f5       	brne	.+76     	; 0x960 <vfprintf+0x224>
 914:	f8 01       	movw	r30, r16
 916:	27 ff       	sbrs	r18, 7
 918:	07 c0       	rjmp	.+14     	; 0x928 <vfprintf+0x1ec>
 91a:	60 81       	ld	r22, Z
 91c:	71 81       	ldd	r23, Z+1	; 0x01
 91e:	82 81       	ldd	r24, Z+2	; 0x02
 920:	93 81       	ldd	r25, Z+3	; 0x03
 922:	0c 5f       	subi	r16, 0xFC	; 252
 924:	1f 4f       	sbci	r17, 0xFF	; 255
 926:	08 c0       	rjmp	.+16     	; 0x938 <vfprintf+0x1fc>
 928:	60 81       	ld	r22, Z
 92a:	71 81       	ldd	r23, Z+1	; 0x01
 92c:	07 2e       	mov	r0, r23
 92e:	00 0c       	add	r0, r0
 930:	88 0b       	sbc	r24, r24
 932:	99 0b       	sbc	r25, r25
 934:	0e 5f       	subi	r16, 0xFE	; 254
 936:	1f 4f       	sbci	r17, 0xFF	; 255
 938:	2f 76       	andi	r18, 0x6F	; 111
 93a:	72 2e       	mov	r7, r18
 93c:	97 ff       	sbrs	r25, 7
 93e:	09 c0       	rjmp	.+18     	; 0x952 <vfprintf+0x216>
 940:	90 95       	com	r25
 942:	80 95       	com	r24
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	20 68       	ori	r18, 0x80	; 128
 950:	72 2e       	mov	r7, r18
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	a4 01       	movw	r20, r8
 958:	2d d1       	rcall	.+602    	; 0xbb4 <__ultoa_invert>
 95a:	a8 2e       	mov	r10, r24
 95c:	a8 18       	sub	r10, r8
 95e:	43 c0       	rjmp	.+134    	; 0x9e6 <vfprintf+0x2aa>
 960:	85 37       	cpi	r24, 0x75	; 117
 962:	29 f4       	brne	.+10     	; 0x96e <vfprintf+0x232>
 964:	2f 7e       	andi	r18, 0xEF	; 239
 966:	b2 2e       	mov	r11, r18
 968:	2a e0       	ldi	r18, 0x0A	; 10
 96a:	30 e0       	ldi	r19, 0x00	; 0
 96c:	25 c0       	rjmp	.+74     	; 0x9b8 <vfprintf+0x27c>
 96e:	f2 2f       	mov	r31, r18
 970:	f9 7f       	andi	r31, 0xF9	; 249
 972:	bf 2e       	mov	r11, r31
 974:	8f 36       	cpi	r24, 0x6F	; 111
 976:	c1 f0       	breq	.+48     	; 0x9a8 <vfprintf+0x26c>
 978:	18 f4       	brcc	.+6      	; 0x980 <vfprintf+0x244>
 97a:	88 35       	cpi	r24, 0x58	; 88
 97c:	79 f0       	breq	.+30     	; 0x99c <vfprintf+0x260>
 97e:	ad c0       	rjmp	.+346    	; 0xada <vfprintf+0x39e>
 980:	80 37       	cpi	r24, 0x70	; 112
 982:	19 f0       	breq	.+6      	; 0x98a <vfprintf+0x24e>
 984:	88 37       	cpi	r24, 0x78	; 120
 986:	21 f0       	breq	.+8      	; 0x990 <vfprintf+0x254>
 988:	a8 c0       	rjmp	.+336    	; 0xada <vfprintf+0x39e>
 98a:	2f 2f       	mov	r18, r31
 98c:	20 61       	ori	r18, 0x10	; 16
 98e:	b2 2e       	mov	r11, r18
 990:	b4 fe       	sbrs	r11, 4
 992:	0d c0       	rjmp	.+26     	; 0x9ae <vfprintf+0x272>
 994:	8b 2d       	mov	r24, r11
 996:	84 60       	ori	r24, 0x04	; 4
 998:	b8 2e       	mov	r11, r24
 99a:	09 c0       	rjmp	.+18     	; 0x9ae <vfprintf+0x272>
 99c:	24 ff       	sbrs	r18, 4
 99e:	0a c0       	rjmp	.+20     	; 0x9b4 <vfprintf+0x278>
 9a0:	9f 2f       	mov	r25, r31
 9a2:	96 60       	ori	r25, 0x06	; 6
 9a4:	b9 2e       	mov	r11, r25
 9a6:	06 c0       	rjmp	.+12     	; 0x9b4 <vfprintf+0x278>
 9a8:	28 e0       	ldi	r18, 0x08	; 8
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	05 c0       	rjmp	.+10     	; 0x9b8 <vfprintf+0x27c>
 9ae:	20 e1       	ldi	r18, 0x10	; 16
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x27c>
 9b4:	20 e1       	ldi	r18, 0x10	; 16
 9b6:	32 e0       	ldi	r19, 0x02	; 2
 9b8:	f8 01       	movw	r30, r16
 9ba:	b7 fe       	sbrs	r11, 7
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <vfprintf+0x290>
 9be:	60 81       	ld	r22, Z
 9c0:	71 81       	ldd	r23, Z+1	; 0x01
 9c2:	82 81       	ldd	r24, Z+2	; 0x02
 9c4:	93 81       	ldd	r25, Z+3	; 0x03
 9c6:	0c 5f       	subi	r16, 0xFC	; 252
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <vfprintf+0x29c>
 9cc:	60 81       	ld	r22, Z
 9ce:	71 81       	ldd	r23, Z+1	; 0x01
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 5f       	subi	r16, 0xFE	; 254
 9d6:	1f 4f       	sbci	r17, 0xFF	; 255
 9d8:	a4 01       	movw	r20, r8
 9da:	ec d0       	rcall	.+472    	; 0xbb4 <__ultoa_invert>
 9dc:	a8 2e       	mov	r10, r24
 9de:	a8 18       	sub	r10, r8
 9e0:	fb 2d       	mov	r31, r11
 9e2:	ff 77       	andi	r31, 0x7F	; 127
 9e4:	7f 2e       	mov	r7, r31
 9e6:	76 fe       	sbrs	r7, 6
 9e8:	0b c0       	rjmp	.+22     	; 0xa00 <vfprintf+0x2c4>
 9ea:	37 2d       	mov	r19, r7
 9ec:	3e 7f       	andi	r19, 0xFE	; 254
 9ee:	a5 14       	cp	r10, r5
 9f0:	50 f4       	brcc	.+20     	; 0xa06 <vfprintf+0x2ca>
 9f2:	74 fe       	sbrs	r7, 4
 9f4:	0a c0       	rjmp	.+20     	; 0xa0a <vfprintf+0x2ce>
 9f6:	72 fc       	sbrc	r7, 2
 9f8:	08 c0       	rjmp	.+16     	; 0xa0a <vfprintf+0x2ce>
 9fa:	37 2d       	mov	r19, r7
 9fc:	3e 7e       	andi	r19, 0xEE	; 238
 9fe:	05 c0       	rjmp	.+10     	; 0xa0a <vfprintf+0x2ce>
 a00:	ba 2c       	mov	r11, r10
 a02:	37 2d       	mov	r19, r7
 a04:	03 c0       	rjmp	.+6      	; 0xa0c <vfprintf+0x2d0>
 a06:	ba 2c       	mov	r11, r10
 a08:	01 c0       	rjmp	.+2      	; 0xa0c <vfprintf+0x2d0>
 a0a:	b5 2c       	mov	r11, r5
 a0c:	34 ff       	sbrs	r19, 4
 a0e:	0d c0       	rjmp	.+26     	; 0xa2a <vfprintf+0x2ee>
 a10:	fe 01       	movw	r30, r28
 a12:	ea 0d       	add	r30, r10
 a14:	f1 1d       	adc	r31, r1
 a16:	80 81       	ld	r24, Z
 a18:	80 33       	cpi	r24, 0x30	; 48
 a1a:	11 f4       	brne	.+4      	; 0xa20 <vfprintf+0x2e4>
 a1c:	39 7e       	andi	r19, 0xE9	; 233
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <vfprintf+0x2f6>
 a20:	32 ff       	sbrs	r19, 2
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <vfprintf+0x2f4>
 a24:	b3 94       	inc	r11
 a26:	b3 94       	inc	r11
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <vfprintf+0x2f6>
 a2a:	83 2f       	mov	r24, r19
 a2c:	86 78       	andi	r24, 0x86	; 134
 a2e:	09 f0       	breq	.+2      	; 0xa32 <vfprintf+0x2f6>
 a30:	b3 94       	inc	r11
 a32:	33 fd       	sbrc	r19, 3
 a34:	12 c0       	rjmp	.+36     	; 0xa5a <vfprintf+0x31e>
 a36:	30 ff       	sbrs	r19, 0
 a38:	06 c0       	rjmp	.+12     	; 0xa46 <vfprintf+0x30a>
 a3a:	5a 2c       	mov	r5, r10
 a3c:	b3 14       	cp	r11, r3
 a3e:	18 f4       	brcc	.+6      	; 0xa46 <vfprintf+0x30a>
 a40:	53 0c       	add	r5, r3
 a42:	5b 18       	sub	r5, r11
 a44:	b3 2c       	mov	r11, r3
 a46:	b3 14       	cp	r11, r3
 a48:	60 f4       	brcc	.+24     	; 0xa62 <vfprintf+0x326>
 a4a:	b7 01       	movw	r22, r14
 a4c:	80 e2       	ldi	r24, 0x20	; 32
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	3c 87       	std	Y+12, r19	; 0x0c
 a52:	78 d0       	rcall	.+240    	; 0xb44 <fputc>
 a54:	b3 94       	inc	r11
 a56:	3c 85       	ldd	r19, Y+12	; 0x0c
 a58:	f6 cf       	rjmp	.-20     	; 0xa46 <vfprintf+0x30a>
 a5a:	b3 14       	cp	r11, r3
 a5c:	10 f4       	brcc	.+4      	; 0xa62 <vfprintf+0x326>
 a5e:	3b 18       	sub	r3, r11
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <vfprintf+0x328>
 a62:	31 2c       	mov	r3, r1
 a64:	34 ff       	sbrs	r19, 4
 a66:	11 c0       	rjmp	.+34     	; 0xa8a <vfprintf+0x34e>
 a68:	b7 01       	movw	r22, r14
 a6a:	80 e3       	ldi	r24, 0x30	; 48
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	3c 87       	std	Y+12, r19	; 0x0c
 a70:	69 d0       	rcall	.+210    	; 0xb44 <fputc>
 a72:	3c 85       	ldd	r19, Y+12	; 0x0c
 a74:	32 ff       	sbrs	r19, 2
 a76:	16 c0       	rjmp	.+44     	; 0xaa4 <vfprintf+0x368>
 a78:	31 fd       	sbrc	r19, 1
 a7a:	03 c0       	rjmp	.+6      	; 0xa82 <vfprintf+0x346>
 a7c:	88 e7       	ldi	r24, 0x78	; 120
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <vfprintf+0x34a>
 a82:	88 e5       	ldi	r24, 0x58	; 88
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	b7 01       	movw	r22, r14
 a88:	0c c0       	rjmp	.+24     	; 0xaa2 <vfprintf+0x366>
 a8a:	83 2f       	mov	r24, r19
 a8c:	86 78       	andi	r24, 0x86	; 134
 a8e:	51 f0       	breq	.+20     	; 0xaa4 <vfprintf+0x368>
 a90:	31 ff       	sbrs	r19, 1
 a92:	02 c0       	rjmp	.+4      	; 0xa98 <vfprintf+0x35c>
 a94:	8b e2       	ldi	r24, 0x2B	; 43
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <vfprintf+0x35e>
 a98:	80 e2       	ldi	r24, 0x20	; 32
 a9a:	37 fd       	sbrc	r19, 7
 a9c:	8d e2       	ldi	r24, 0x2D	; 45
 a9e:	b7 01       	movw	r22, r14
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	50 d0       	rcall	.+160    	; 0xb44 <fputc>
 aa4:	a5 14       	cp	r10, r5
 aa6:	30 f4       	brcc	.+12     	; 0xab4 <vfprintf+0x378>
 aa8:	b7 01       	movw	r22, r14
 aaa:	80 e3       	ldi	r24, 0x30	; 48
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	4a d0       	rcall	.+148    	; 0xb44 <fputc>
 ab0:	5a 94       	dec	r5
 ab2:	f8 cf       	rjmp	.-16     	; 0xaa4 <vfprintf+0x368>
 ab4:	aa 94       	dec	r10
 ab6:	f4 01       	movw	r30, r8
 ab8:	ea 0d       	add	r30, r10
 aba:	f1 1d       	adc	r31, r1
 abc:	80 81       	ld	r24, Z
 abe:	b7 01       	movw	r22, r14
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	40 d0       	rcall	.+128    	; 0xb44 <fputc>
 ac4:	a1 10       	cpse	r10, r1
 ac6:	f6 cf       	rjmp	.-20     	; 0xab4 <vfprintf+0x378>
 ac8:	33 20       	and	r3, r3
 aca:	09 f4       	brne	.+2      	; 0xace <vfprintf+0x392>
 acc:	5d ce       	rjmp	.-838    	; 0x788 <vfprintf+0x4c>
 ace:	b7 01       	movw	r22, r14
 ad0:	80 e2       	ldi	r24, 0x20	; 32
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	37 d0       	rcall	.+110    	; 0xb44 <fputc>
 ad6:	3a 94       	dec	r3
 ad8:	f7 cf       	rjmp	.-18     	; 0xac8 <vfprintf+0x38c>
 ada:	f7 01       	movw	r30, r14
 adc:	86 81       	ldd	r24, Z+6	; 0x06
 ade:	97 81       	ldd	r25, Z+7	; 0x07
 ae0:	02 c0       	rjmp	.+4      	; 0xae6 <vfprintf+0x3aa>
 ae2:	8f ef       	ldi	r24, 0xFF	; 255
 ae4:	9f ef       	ldi	r25, 0xFF	; 255
 ae6:	2c 96       	adiw	r28, 0x0c	; 12
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	ff 90       	pop	r15
 afc:	ef 90       	pop	r14
 afe:	df 90       	pop	r13
 b00:	cf 90       	pop	r12
 b02:	bf 90       	pop	r11
 b04:	af 90       	pop	r10
 b06:	9f 90       	pop	r9
 b08:	8f 90       	pop	r8
 b0a:	7f 90       	pop	r7
 b0c:	6f 90       	pop	r6
 b0e:	5f 90       	pop	r5
 b10:	4f 90       	pop	r4
 b12:	3f 90       	pop	r3
 b14:	2f 90       	pop	r2
 b16:	08 95       	ret

00000b18 <strnlen_P>:
 b18:	fc 01       	movw	r30, r24
 b1a:	05 90       	lpm	r0, Z+
 b1c:	61 50       	subi	r22, 0x01	; 1
 b1e:	70 40       	sbci	r23, 0x00	; 0
 b20:	01 10       	cpse	r0, r1
 b22:	d8 f7       	brcc	.-10     	; 0xb1a <strnlen_P+0x2>
 b24:	80 95       	com	r24
 b26:	90 95       	com	r25
 b28:	8e 0f       	add	r24, r30
 b2a:	9f 1f       	adc	r25, r31
 b2c:	08 95       	ret

00000b2e <strnlen>:
 b2e:	fc 01       	movw	r30, r24
 b30:	61 50       	subi	r22, 0x01	; 1
 b32:	70 40       	sbci	r23, 0x00	; 0
 b34:	01 90       	ld	r0, Z+
 b36:	01 10       	cpse	r0, r1
 b38:	d8 f7       	brcc	.-10     	; 0xb30 <strnlen+0x2>
 b3a:	80 95       	com	r24
 b3c:	90 95       	com	r25
 b3e:	8e 0f       	add	r24, r30
 b40:	9f 1f       	adc	r25, r31
 b42:	08 95       	ret

00000b44 <fputc>:
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	fb 01       	movw	r30, r22
 b4e:	23 81       	ldd	r18, Z+3	; 0x03
 b50:	21 fd       	sbrc	r18, 1
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <fputc+0x16>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	9f ef       	ldi	r25, 0xFF	; 255
 b58:	28 c0       	rjmp	.+80     	; 0xbaa <fputc+0x66>
 b5a:	22 ff       	sbrs	r18, 2
 b5c:	16 c0       	rjmp	.+44     	; 0xb8a <fputc+0x46>
 b5e:	46 81       	ldd	r20, Z+6	; 0x06
 b60:	57 81       	ldd	r21, Z+7	; 0x07
 b62:	24 81       	ldd	r18, Z+4	; 0x04
 b64:	35 81       	ldd	r19, Z+5	; 0x05
 b66:	42 17       	cp	r20, r18
 b68:	53 07       	cpc	r21, r19
 b6a:	44 f4       	brge	.+16     	; 0xb7c <fputc+0x38>
 b6c:	a0 81       	ld	r26, Z
 b6e:	b1 81       	ldd	r27, Z+1	; 0x01
 b70:	9d 01       	movw	r18, r26
 b72:	2f 5f       	subi	r18, 0xFF	; 255
 b74:	3f 4f       	sbci	r19, 0xFF	; 255
 b76:	31 83       	std	Z+1, r19	; 0x01
 b78:	20 83       	st	Z, r18
 b7a:	8c 93       	st	X, r24
 b7c:	26 81       	ldd	r18, Z+6	; 0x06
 b7e:	37 81       	ldd	r19, Z+7	; 0x07
 b80:	2f 5f       	subi	r18, 0xFF	; 255
 b82:	3f 4f       	sbci	r19, 0xFF	; 255
 b84:	37 83       	std	Z+7, r19	; 0x07
 b86:	26 83       	std	Z+6, r18	; 0x06
 b88:	10 c0       	rjmp	.+32     	; 0xbaa <fputc+0x66>
 b8a:	eb 01       	movw	r28, r22
 b8c:	09 2f       	mov	r16, r25
 b8e:	18 2f       	mov	r17, r24
 b90:	00 84       	ldd	r0, Z+8	; 0x08
 b92:	f1 85       	ldd	r31, Z+9	; 0x09
 b94:	e0 2d       	mov	r30, r0
 b96:	09 95       	icall
 b98:	89 2b       	or	r24, r25
 b9a:	e1 f6       	brne	.-72     	; 0xb54 <fputc+0x10>
 b9c:	8e 81       	ldd	r24, Y+6	; 0x06
 b9e:	9f 81       	ldd	r25, Y+7	; 0x07
 ba0:	01 96       	adiw	r24, 0x01	; 1
 ba2:	9f 83       	std	Y+7, r25	; 0x07
 ba4:	8e 83       	std	Y+6, r24	; 0x06
 ba6:	81 2f       	mov	r24, r17
 ba8:	90 2f       	mov	r25, r16
 baa:	df 91       	pop	r29
 bac:	cf 91       	pop	r28
 bae:	1f 91       	pop	r17
 bb0:	0f 91       	pop	r16
 bb2:	08 95       	ret

00000bb4 <__ultoa_invert>:
 bb4:	fa 01       	movw	r30, r20
 bb6:	aa 27       	eor	r26, r26
 bb8:	28 30       	cpi	r18, 0x08	; 8
 bba:	51 f1       	breq	.+84     	; 0xc10 <__ultoa_invert+0x5c>
 bbc:	20 31       	cpi	r18, 0x10	; 16
 bbe:	81 f1       	breq	.+96     	; 0xc20 <__ultoa_invert+0x6c>
 bc0:	e8 94       	clt
 bc2:	6f 93       	push	r22
 bc4:	6e 7f       	andi	r22, 0xFE	; 254
 bc6:	6e 5f       	subi	r22, 0xFE	; 254
 bc8:	7f 4f       	sbci	r23, 0xFF	; 255
 bca:	8f 4f       	sbci	r24, 0xFF	; 255
 bcc:	9f 4f       	sbci	r25, 0xFF	; 255
 bce:	af 4f       	sbci	r26, 0xFF	; 255
 bd0:	b1 e0       	ldi	r27, 0x01	; 1
 bd2:	3e d0       	rcall	.+124    	; 0xc50 <__ultoa_invert+0x9c>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	3c d0       	rcall	.+120    	; 0xc50 <__ultoa_invert+0x9c>
 bd8:	67 0f       	add	r22, r23
 bda:	78 1f       	adc	r23, r24
 bdc:	89 1f       	adc	r24, r25
 bde:	9a 1f       	adc	r25, r26
 be0:	a1 1d       	adc	r26, r1
 be2:	68 0f       	add	r22, r24
 be4:	79 1f       	adc	r23, r25
 be6:	8a 1f       	adc	r24, r26
 be8:	91 1d       	adc	r25, r1
 bea:	a1 1d       	adc	r26, r1
 bec:	6a 0f       	add	r22, r26
 bee:	71 1d       	adc	r23, r1
 bf0:	81 1d       	adc	r24, r1
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	20 d0       	rcall	.+64     	; 0xc38 <__ultoa_invert+0x84>
 bf8:	09 f4       	brne	.+2      	; 0xbfc <__ultoa_invert+0x48>
 bfa:	68 94       	set
 bfc:	3f 91       	pop	r19
 bfe:	2a e0       	ldi	r18, 0x0A	; 10
 c00:	26 9f       	mul	r18, r22
 c02:	11 24       	eor	r1, r1
 c04:	30 19       	sub	r19, r0
 c06:	30 5d       	subi	r19, 0xD0	; 208
 c08:	31 93       	st	Z+, r19
 c0a:	de f6       	brtc	.-74     	; 0xbc2 <__ultoa_invert+0xe>
 c0c:	cf 01       	movw	r24, r30
 c0e:	08 95       	ret
 c10:	46 2f       	mov	r20, r22
 c12:	47 70       	andi	r20, 0x07	; 7
 c14:	40 5d       	subi	r20, 0xD0	; 208
 c16:	41 93       	st	Z+, r20
 c18:	b3 e0       	ldi	r27, 0x03	; 3
 c1a:	0f d0       	rcall	.+30     	; 0xc3a <__ultoa_invert+0x86>
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__ultoa_invert+0x5c>
 c1e:	f6 cf       	rjmp	.-20     	; 0xc0c <__ultoa_invert+0x58>
 c20:	46 2f       	mov	r20, r22
 c22:	4f 70       	andi	r20, 0x0F	; 15
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	4a 33       	cpi	r20, 0x3A	; 58
 c28:	18 f0       	brcs	.+6      	; 0xc30 <__ultoa_invert+0x7c>
 c2a:	49 5d       	subi	r20, 0xD9	; 217
 c2c:	31 fd       	sbrc	r19, 1
 c2e:	40 52       	subi	r20, 0x20	; 32
 c30:	41 93       	st	Z+, r20
 c32:	02 d0       	rcall	.+4      	; 0xc38 <__ultoa_invert+0x84>
 c34:	a9 f7       	brne	.-22     	; 0xc20 <__ultoa_invert+0x6c>
 c36:	ea cf       	rjmp	.-44     	; 0xc0c <__ultoa_invert+0x58>
 c38:	b4 e0       	ldi	r27, 0x04	; 4
 c3a:	a6 95       	lsr	r26
 c3c:	97 95       	ror	r25
 c3e:	87 95       	ror	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	ba 95       	dec	r27
 c46:	c9 f7       	brne	.-14     	; 0xc3a <__ultoa_invert+0x86>
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	61 05       	cpc	r22, r1
 c4c:	71 05       	cpc	r23, r1
 c4e:	08 95       	ret
 c50:	9b 01       	movw	r18, r22
 c52:	ac 01       	movw	r20, r24
 c54:	0a 2e       	mov	r0, r26
 c56:	06 94       	lsr	r0
 c58:	57 95       	ror	r21
 c5a:	47 95       	ror	r20
 c5c:	37 95       	ror	r19
 c5e:	27 95       	ror	r18
 c60:	ba 95       	dec	r27
 c62:	c9 f7       	brne	.-14     	; 0xc56 <__ultoa_invert+0xa2>
 c64:	62 0f       	add	r22, r18
 c66:	73 1f       	adc	r23, r19
 c68:	84 1f       	adc	r24, r20
 c6a:	95 1f       	adc	r25, r21
 c6c:	a0 1d       	adc	r26, r0
 c6e:	08 95       	ret

00000c70 <_exit>:
 c70:	f8 94       	cli

00000c72 <__stop_program>:
 c72:	ff cf       	rjmp	.-2      	; 0xc72 <__stop_program>
